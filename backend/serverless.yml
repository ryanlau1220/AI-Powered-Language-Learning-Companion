service: ai-language-learning-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: ap-southeast-1  # Singapore region (closest to Malaysia)
  stage: ${opt:stage, 'dev'}
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    NODE_ENV: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'default-jwt-secret'}
    USERS_TABLE: ${self:service}-${self:provider.stage}-users
    CONVERSATIONS_TABLE: ${self:service}-${self:provider.stage}-conversations
    LEX_BOT_ID: ${env:LEX_BOT_ID, 'your-lex-bot-id'}
    LEX_BOT_ALIAS_ID: ${env:LEX_BOT_ALIAS_ID, 'your-lex-alias-id'}
    LEX_REGION: ap-southeast-1
    BEDROCK_MODEL_ID: ${env:BEDROCK_MODEL_ID, 'amazon.nova-pro-v1:0'}
    BEDROCK_REGION: ap-southeast-1
    TRANSCRIBE_LANGUAGE_CODE: ${env:TRANSCRIBE_LANGUAGE_CODE, 'en-US'}
    TRANSCRIBE_REGION: ap-southeast-1
    POLLY_VOICE_ID: ${env:POLLY_VOICE_ID, 'Joanna'}
    POLLY_REGION: ap-southeast-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:service}-${self:provider.stage}*"
        - Effect: Allow
          Action:
            - lex:RecognizeText
            - lex:RecognizeUtterance
            - lex:StartConversation
            - lex:GetSession
            - lex:PutSession
            - lex:DeleteSession
          Resource: "*"
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
          Resource: "*"
        - Effect: Allow
          Action:
            - transcribe:StartTranscriptionJob
            - transcribe:GetTranscriptionJob
          Resource: "*"
        - Effect: Allow
          Action:
            - polly:SynthesizeSpeech
          Resource: "*"

functions:
  api:
    handler: src/handlers/api.handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true
    environment:
      LEX_REGION: ap-southeast-1  # Singapore region for AI services
      BEDROCK_REGION: ap-southeast-1
      TRANSCRIBE_REGION: ap-southeast-1
      POLLY_REGION: ap-southeast-1

  conversation:
    handler: src/handlers/conversationLambda.handler
    events:
      - http:
          path: /conversation/{proxy+}
          method: ANY
          cors: true
    environment:
      LEX_REGION: ap-southeast-1
      BEDROCK_REGION: ap-southeast-1

  speech:
    handler: src/handlers/speechLambda.handler
    events:
      - http:
          path: /speech/{proxy+}
          method: ANY
          cors: true
    environment:
      TRANSCRIBE_REGION: ap-southeast-1
      POLLY_REGION: ap-southeast-1

  user:
    handler: src/handlers/userLambda.handler
    events:
      - http:
          path: /user/{proxy+}
          method: ANY
          cors: true

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-users
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    ConversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-conversations
        AttributeDefinitions:
          - AttributeName: conversationId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: conversationId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: UserConversationsIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-offline
